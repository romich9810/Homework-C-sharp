using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _4_4_UserMap
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string[] mapFirstly = new string[]
            {"##########################################################",
            "##      Л                                                ##",
            "##   ##    ###      ###  ###    ###  ###      ###   ##   ##",
            "##   ##    ###      ########    ########      ###   ##   ##",
            "##   ##    ###      ###  ###    ###  ###      ###   ##   ##",
            "##                                                       ##",
            "##                         ######                        ##",
            "##      ###########        ######        ##########      ##",
            "##      ###########                      ##########      ##",
            "##                                                       ##",
            "##                  ### ###     ###  ###                 ##",
            "##                  #######     ########                 ##",
            "##                  ### ###     ###  ###                 ##",
            "##                                                       ##",
            "##          P              #####                         ##",
            "##                       #########                       ##",
            "##                       #########                       ##",
            "##                       #########              Ы        ##",
            "###########################################################",
            };

            bool isPlaying = true;

            int playerVerticalPosition = 0;
            int playerHorrizonPosition = 0;
            char playerSymbol = 'Ы';
            bool arePlayerPowerfull = false;

            bool arePlayerAndEnemyMeeting = false;
            char symbolOfWall = '#';
            char symbolOfPowerfull = 'P';

            Random randomEnemyMove = new Random();
            int enemyVerticalPosition = 0;
            int enemyHorrizonPosition = 0;
            char enemySymbol = 'Л';

            Console.CursorVisible = false;

            char[,] map = ConvertToCharMassive(mapFirstly, playerSymbol, ref playerVerticalPosition, ref playerHorrizonPosition, 
                enemySymbol, ref enemyVerticalPosition, ref enemyHorrizonPosition);

            DrawMap(map);

            while (isPlaying)
            {
                if (Console.KeyAvailable)
                {
                    ConsoleKeyInfo key = Console.ReadKey(true);
                    MovePlayer(map, ref playerVerticalPosition, ref playerHorrizonPosition, playerSymbol, key, ref arePlayerPowerfull, symbolOfWall, symbolOfPowerfull);
                    DrawPlayer(playerHorrizonPosition, playerVerticalPosition, playerSymbol);
                    MoveEnemy(map, ref enemyVerticalPosition, ref enemyHorrizonPosition,enemySymbol,playerSymbol,ref arePlayerAndEnemyMeeting,arePlayerPowerfull, symbolOfWall, randomEnemyMove);
                    DrawEnemy(enemyVerticalPosition, enemyHorrizonPosition, enemySymbol, playerSymbol, arePlayerAndEnemyMeeting, arePlayerPowerfull);

                    if (arePlayerPowerfull)
                    {
                        Console.SetCursorPosition(0, 25);
                        Console.WriteLine($"Теперь вы можете съесть {enemySymbol}!");
                    }

                    Console.SetCursorPosition(0, 26);

                    if (arePlayerAndEnemyMeeting)
                    {
                        if (arePlayerPowerfull)
                        {
                            isPlaying = false;
                            Console.WriteLine($"\"{enemySymbol}\" повержен! Победа!");
                        }
                        else
                        {
                            isPlaying = false;
                            Console.WriteLine($"\"{enemySymbol}\" вас съел. Игра окончена.");
                        }
                    }
                }

                System.Threading.Thread.Sleep(200);
            }
        }

        static void DrawMap(char[,] map)
        {
            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    Console.Write(map[i,j]);
                }

                Console.WriteLine();
            }
        }

        static char[,] ConvertToCharMassive (string[] massive, char symbolOfPlayer, ref int playerVerticalPosition, ref int playerHorrizonPosition, char symbolOfEnemy, ref int enemyVerticalPosition, ref int enemyHorrizonPosition)
        {
            char[,] resultMassive = new char[massive.Length, massive[0].Length];

            for (int i = 0; i < resultMassive.GetLength(0); i++)
            {
                for (int j = 0; j < resultMassive.GetLength(1); j++)
                {
                    resultMassive[i, j] = massive[i][j];

                    if (resultMassive[i, j] == symbolOfPlayer)
                    {
                        playerVerticalPosition = i;
                        playerHorrizonPosition = j;
                    }
                    
                    else if (resultMassive[i, j] == symbolOfEnemy)
                    {
                        enemyVerticalPosition = i;
                        enemyHorrizonPosition = j;
                    }
                }
            }

            return resultMassive;
        }

        static void MovePlayer (char[,] massive, ref int playerPositionVertical, ref int playerPositionHorrizon, char symbolOfPlayer, ConsoleKeyInfo key, ref bool arePlayerPowerfull,
            char symbolOfWall, char symbolOfPowerful)
        {
            const ConsoleKey GoUp = ConsoleKey.UpArrow;
            const ConsoleKey GoDown = ConsoleKey.DownArrow;
            const ConsoleKey GoLeft = ConsoleKey.LeftArrow;
            const ConsoleKey GoRight = ConsoleKey.RightArrow;

            int verticalPosition = 0;
            int horizonPosition = 0;

            switch (key.Key)
            {
                case GoUp:
                    verticalPosition -= 1;
                    break;

                case GoDown:
                    verticalPosition += 1;
                    break;

                case GoLeft:
                    horizonPosition -= 1;
                    break;

                case GoRight:
                    horizonPosition += 1;
                    break;
            }

            GoToUserKey(verticalPosition, horizonPosition , massive, ref playerPositionVertical, ref playerPositionHorrizon, symbolOfPlayer, ref arePlayerPowerfull, symbolOfWall, symbolOfPowerful);
        }

        static void DrawPlayer (int playerPositionHorrizon, int playerPositionVertical, char symbolOfPlayer)
        {
            Console.SetCursorPosition(playerPositionHorrizon, playerPositionVertical);
            Console.Write(symbolOfPlayer);
        }

        static void GoToUserKey (int changingPositionVertical, int changingPositionHorrizon, char[,] massive, ref int playerPositionVertical, ref int playerPositionHorrizon, char symbolOfPlayer, ref bool arePlayerPowerfull,
            char symbolOfWall, char symbolOfPowerful)
        {
            if (massive[playerPositionVertical + changingPositionVertical, playerPositionHorrizon + changingPositionHorrizon] == symbolOfWall)
            {
                return;
            }

            if (massive[playerPositionVertical + changingPositionVertical, playerPositionHorrizon + changingPositionHorrizon] == symbolOfPowerful)
            {
                arePlayerPowerfull = true;
            }

            ChangeSymbolAfterStep(massive, ref playerPositionVertical, ref playerPositionHorrizon);
            playerPositionVertical += changingPositionVertical;
            playerPositionHorrizon += changingPositionHorrizon;
            massive[playerPositionVertical, playerPositionHorrizon] = symbolOfPlayer;
        }

        static void ChangeSymbolAfterStep (char[,] massive, ref int positionVertical, ref int positionHorrizon, char symbolOfChange = ' ')
        {
            massive[positionVertical, positionHorrizon] = symbolOfChange;
            Console.SetCursorPosition(positionHorrizon, positionVertical);
            Console.Write(symbolOfChange);
        }

        static void MoveEnemy(char[,] massive, ref int enemyPositionVertical, ref int enemyPositionHorrizon, char symbolEnemy,char symbolOfPlayer, ref bool arePlayerAndEnemyMeet,bool arePlayerPowerfull, char symbolOfWall, Random random)
        {
            int enemyMove = random.Next(1, 5);

            int verticalPosition = 0;
            int horizonPosition = 0;

            switch (enemyMove)
            {
                case 1:
                    verticalPosition -= 1;
                    break;

                case 2:
                    verticalPosition += 1;
                    break;

                case 3:
                    horizonPosition -= 1;
                    break;

                case 4:
                    horizonPosition += 1;
                    break;
            }

            GoToEnemyAfterUserKey(verticalPosition, horizonPosition, massive, ref enemyPositionVertical, ref enemyPositionHorrizon, symbolOfPlayer, ref arePlayerAndEnemyMeet, symbolOfWall);
        }
        
        static void GoToEnemyAfterUserKey (int changingPositionVertical, int changingPositionHorrizon, char[,] massive, ref int enemyPositionX, ref int enemyPositionY, char symbolOfPlayer, ref bool arePlayerAndEnemyMeet, char symbolOfWall)
        {
            while (massive[enemyPositionX + changingPositionVertical, enemyPositionY + changingPositionHorrizon] != symbolOfWall)
            {
                if (massive[enemyPositionX + changingPositionVertical, enemyPositionY + changingPositionHorrizon] == symbolOfPlayer)
                {
                    arePlayerAndEnemyMeet = true;
                }

                ChangeSymbolAfterStep(massive, ref enemyPositionX, ref enemyPositionY);
                enemyPositionX += changingPositionVertical;
                enemyPositionY += changingPositionHorrizon;
            }
        }

        static void DrawEnemy (int enemyPositionVertical, int enemyPositionHorrizon, char symbolEnemy, char symbolOfPlayer, bool arePlayerAndEnemyMeet, bool arePlayerPowerfull)
        {
            Console.SetCursorPosition(enemyPositionHorrizon, enemyPositionVertical);

            if (arePlayerPowerfull && arePlayerAndEnemyMeet)
            {
                Console.Write(symbolOfPlayer);
            }
            else
            {
                Console.Write(symbolEnemy);
            }
        }
    }
}
