using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _4_4_UserMap
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string[] mapFirstly = new string[]
            {"##########################################################",
            "##      Л                                                ##",
            "##   ##    ###      ###  ###    ###  ###      ###   ##   ##",
            "##   ##    ###      ########    ########      ###   ##   ##",
            "##   ##    ###      ###  ###    ###  ###      ###   ##   ##",
            "##                                                       ##",
            "##                         ######                        ##",
            "##      ###########        ######        ##########      ##",
            "##      ###########                      ##########      ##",
            "##                                                       ##",
            "##                  ### ###     ###  ###                 ##",
            "##                  #######     ########                 ##",
            "##                  ### ###     ###  ###                 ##",
            "##                                                       ##",
            "##          P              #####                         ##",
            "##                       #########                       ##",
            "##                       #########                       ##",
            "##                       #########              Ы        ##",
            "###########################################################",
            };

            bool isPlaying = true;

            int userXPosition = 0;
            int userYPosition = 0;
            char userSymbol = 'Ы';
            bool areUPowerfull = false;

            bool areUserAndEnemyMeeting = false;
            char symbolOfWall = '#';
            char symbolOfPowerfull = 'P';

            Random randomEnemyMove = new Random();
            int enemyX = 0;
            int enemyY = 0;
            char enemySymbol = 'Л';

            Console.CursorVisible = false;

            char[,] map = ConvertToCharMassive(mapFirstly, userSymbol, ref userXPosition, ref userYPosition, 
                enemySymbol, ref enemyX, ref enemyY);

            DrawMap(map);

            while (isPlaying)
            {
                if (Console.KeyAvailable)
                {
                    ConsoleKeyInfo key = Console.ReadKey(true);
                    MovePlayer(map, ref userXPosition, ref userYPosition, userSymbol, key, ref areUPowerfull, symbolOfWall, symbolOfPowerfull);
                    MoveEnemy(map, ref enemyX, ref enemyY,enemySymbol,userSymbol,ref areUserAndEnemyMeeting,areUPowerfull, symbolOfWall, randomEnemyMove);

                    if (areUPowerfull)
                    {
                        Console.SetCursorPosition(0, 25);
                        Console.WriteLine($"Теперь вы можете съесть {enemySymbol}!");
                    }

                    if (areUserAndEnemyMeeting)
                    {
                        if (areUPowerfull)
                        {
                            isPlaying = false;
                            Console.SetCursorPosition(0, 26);
                            Console.WriteLine($"\"{enemySymbol}\" повержен! Победа!");
                        }
                        else
                        {
                            isPlaying = false;
                            Console.SetCursorPosition(0, 26);
                            Console.WriteLine($"\"{enemySymbol}\" вас съел. Игра окончена.");
                        }
                    }
                }

                System.Threading.Thread.Sleep(200);
            }
        }

        static void DrawMap(char[,] map)
        {
            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    Console.Write(map[i,j]);
                }

                Console.WriteLine();
            }
        }

        static char[,] ConvertToCharMassive (string[] massive, char symbolOfPlayer, ref int playerX, ref int playerY, char symbolOfEnemy, ref int enemyX, ref int enemyY)
        {
            char[,] resultMassive = new char[massive.Length, massive[0].Length];

            for (int i = 0; i < resultMassive.GetLength(0); i++)
            {
                for (int j = 0; j < resultMassive.GetLength(1); j++)
                {
                    resultMassive[i, j] = massive[i][j];

                    if (resultMassive[i, j] == symbolOfPlayer)
                    {
                        playerX = i;
                        playerY = j;
                    }
                    
                    else if (resultMassive[i, j] == symbolOfEnemy)
                    {
                        enemyX = i;
                        enemyY = j;
                    }
                }
            }

            return resultMassive;
        }

        static void MovePlayer (char[,] massive, ref int playerPositionX, ref int playerPositionY, char symbolOfUser, ConsoleKeyInfo key, ref bool areUPowerfull,
            char symbolOfWall, char symbolOfPowerful)
        {
            const ConsoleKey goUp = ConsoleKey.UpArrow;
            const ConsoleKey goDown = ConsoleKey.DownArrow;
            const ConsoleKey goLeft = ConsoleKey.LeftArrow;
            const ConsoleKey goRight = ConsoleKey.RightArrow;

            switch (key.Key)
            {
                case goUp:
                    GoToUserKey(-1, 0, massive, ref playerPositionX, ref playerPositionY, symbolOfUser, ref areUPowerfull, symbolOfWall, symbolOfPowerful);
                    break;

                case goDown:
                    GoToUserKey(1, 0, massive, ref playerPositionX, ref playerPositionY, symbolOfUser, ref areUPowerfull, symbolOfWall, symbolOfPowerful);
                    break;

                case goLeft:
                    GoToUserKey(0, -1, massive, ref playerPositionX, ref playerPositionY, symbolOfUser, ref areUPowerfull, symbolOfWall, symbolOfPowerful);
                    break;

                case goRight:
                    GoToUserKey(0, 1, massive, ref playerPositionX, ref playerPositionY, symbolOfUser, ref areUPowerfull, symbolOfWall, symbolOfPowerful);
                    break;
            }

            Console.SetCursorPosition(playerPositionY, playerPositionX);
            Console.Write(symbolOfUser);
        }

        static void GoToUserKey (int changingPositionX, int changingPositionY, char[,] massive, ref int playerPositionX, ref int playerPositionY, char symbolOfUser, ref bool areUPowerfull,
            char symbolOfWall, char symbolOfPowerful)
        {
            if (massive[playerPositionX + changingPositionX, playerPositionY + changingPositionY] == symbolOfWall)
            {
                return;
            }

            if (massive[playerPositionX + changingPositionX, playerPositionY + changingPositionY] == symbolOfPowerful)
            {
                areUPowerfull = true;
            }

            DrawSymbolAfterStep(ref massive, ref playerPositionX, ref playerPositionY);
            playerPositionX += changingPositionX;
            playerPositionY += changingPositionY;
            massive[playerPositionX, playerPositionY] = symbolOfUser;
        }

        static void DrawSymbolAfterStep (ref char[,] massive, ref int positionX, ref int positionY, char symbolOfChange = ' ')
        {
            massive[positionX, positionY] = symbolOfChange;
            Console.SetCursorPosition(positionY, positionX);
            Console.Write(symbolOfChange);
        }

        static void MoveEnemy(char[,] massive, ref int enemyPositionX, ref int enemyPositionY, char symbolEnemy,char symbolUser, ref bool areUserAndEnemyMeet,bool areUPowerfull, char symbolOfWall, Random random)
        {
            int enemyMove = random.Next(1, 5);

            switch (enemyMove)
            {
                case 1:
                    GoToEnemyAfterUserKey(-1, 0, massive, ref enemyPositionX, ref enemyPositionY, symbolUser, ref areUserAndEnemyMeet, symbolOfWall);
                    break;

                case 2:
                    GoToEnemyAfterUserKey(1, 0, massive, ref enemyPositionX, ref enemyPositionY, symbolUser, ref areUserAndEnemyMeet, symbolOfWall);
                    break;

                case 3:
                    GoToEnemyAfterUserKey(0, -1, massive, ref enemyPositionX, ref enemyPositionY, symbolUser, ref areUserAndEnemyMeet, symbolOfWall);
                    break;

                case 4:
                    GoToEnemyAfterUserKey(0, 1, massive, ref enemyPositionX, ref enemyPositionY, symbolUser, ref areUserAndEnemyMeet, symbolOfWall);
                    break;
            }

            if (areUPowerfull && areUserAndEnemyMeet)
            {
                Console.SetCursorPosition(enemyPositionY, enemyPositionX);
                Console.Write(symbolUser);
            }
            else
            {
                Console.SetCursorPosition(enemyPositionY, enemyPositionX);
                Console.Write(symbolEnemy);
            }
        }
        
        static void GoToEnemyAfterUserKey (int changingPositionX, int changingPositionY, char[,] massive, ref int enemyPositionX, ref int enemyPositionY, char symbolUser, ref bool areUserAndEnemyMeet, char symbolOfWall)
        {
            while (massive[enemyPositionX + changingPositionX, enemyPositionY + changingPositionY] != symbolOfWall)
            {
                if (massive[enemyPositionX + changingPositionX, enemyPositionY + changingPositionY] == symbolUser)
                {
                    areUserAndEnemyMeet = true;
                }

                DrawSymbolAfterStep(ref massive, ref enemyPositionX, ref enemyPositionY);
                enemyPositionX += changingPositionX;
                enemyPositionY += changingPositionY;
            }
        }
    }
}
